18. 四数之和
给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。

注意：

答案中不可以包含重复的四元组。

示例：

给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。

满足要求的四元组集合为：
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        if(nums.size() < 4)
            return res;
        int a, b, c, d, _size = nums.size();
        for(a = 0; a <= _size - 4; a++)
        {
            if(a > 0 && nums[a] == nums[a - 1]) continue;
            for(b = a + 1; b <= _size - 3; b++)
            {
                if(b > a + 1 && nums[b] == nums[b - 1]) continue;
                c = b + 1, d = _size - 1;
                while(c < d)
                {
                    if(nums[a] + nums[b] + nums[c] + nums[d] < target)
                        c++;
                    else if(nums[a] + nums[b] + nums[c] + nums[d] > target)
                        d--;
                    else{
                        res.push_back({nums[a], nums[b], nums[c], nums[d]});
                        while(c < d && nums[c + 1] == nums[c])
                            c++;
                        while(c < d && nums[d - 1] == nums[d])
                            d--;
                        c++;
                        d--;
                    }
                    
                }
            }
        }
        return res;
    }
};


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if(nums.size() < 4) return {};
        sort(nums.begin(), nums.end());
        set<vector<int>> temp;
        vector<vector<int>> res;
        int _size = nums.size();
        for(int i = 0; i < _size - 3; i++)
        {
            if(nums[i] > target && target > 0) break;
            for(int j = i + 1; j < _size - 2; j++)
            {
                int l = j + 1;
                int m = _size - 1;
                while(l < m)
                {
                    if(nums[i] + nums[j] + nums[l] + nums[m] < target)
                        l++;
                    else if(nums[i] + nums[j] + nums[l] + nums[m] > target)
                        m--;
                    else{
                        vector<int> temp1{nums[i], nums[j], nums[l], nums[m]};
                        temp.insert(temp1);
                        l++;
                        m--;
                    }
                }
            }
        }
        for(auto a : temp)
        {
            res.push_back(a);
        }
        return res;
    }
};