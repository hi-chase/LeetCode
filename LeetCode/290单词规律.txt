290. 单词规律
给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。

这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。

示例1:

输入: pattern = "abba", str = "dog cat cat dog"
输出: true
示例 2:

输入:pattern = "abba", str = "dog cat cat fish"
输出: false
示例 3:

输入: pattern = "aaaa", str = "dog cat cat dog"
输出: false
示例 4:

输入: pattern = "abba", str = "dog dog dog dog"
输出: false
说明:
你可以假设 pattern 只包含小写字母， str 包含了由单个空格分隔的小写字母。

class Solution {
public:
    bool wordPattern(string pattern, string s) {
        map<char, string> mp;
        map<string, char> pm;
        int j = 0;
        vector<string> arr;
        for(int i = 0; i < s.size(); i++)
        {
            if(i == s.size() - 1)
            {
                arr.push_back(s.substr(j, s.size() - j));
            }
            if(s[i] == ' ')
            {
                arr.push_back(s.substr(j, i - j));
                j = i + 1;
            }
        }
        if(pattern.size() != arr.size()) return false;
        for(int i= 0; i < pattern.size(); ++i)
        {
            if(mp.find(pattern[i]) != mp.end() && mp[pattern[i]] != arr[i])
            {
                return false;
            }
            if(pm.find(arr[i]) != pm.end() && pm[arr[i]] != pattern[i])
            {
                return false;
            }
            mp[pattern[i]] = arr[i];
            pm[arr[i]] = pattern[i];
        }
        return true;
    }
};

class Solution {
public:
    bool wordPattern(string pattern, string s) {
        map<char, string> mp;
        map<string, char> pm;
        int j = 0;
        vector<string> arr;
        for(int i = 0; i < s.size(); i++)
        {
            if(i == s.size() - 1)
            {
                arr.push_back(s.substr(j, s.size() - j));
            }
            if(s[i] == ' ')
            {
                arr.push_back(s.substr(j, i - j));
                j = i + 1;
            }
        }
        if(pattern.size() != arr.size()) return false;
        for(int i= 0; i < pattern.size(); ++i)
        {
            if(mp.count(pattern[i]) && mp[pattern[i]] != arr[i])
            {
                return false;
            }
            if(pm.count(arr[i]) && pm[arr[i]] != pattern[i])
            {
                return false;
            }
            mp[pattern[i]] = arr[i];
            pm[arr[i]] = pattern[i];
        }
        return true;
    }
};

class Solution {
public:
    bool wordPattern(string pattern, string s) {
        unordered_map<char, string> map;
        unordered_map<string, char> rmap;
        stringstream ss(s);
        string str;
        for(char c : pattern)
        {
            if(!(ss >> str) || (map.count(c) == 1 && map[c] != str) || (rmap.count(str) == 1 && rmap[str] != c)) return false;
            map[c] = str;
            rmap[str] = c;
        }
        return (ss >> str) ? false :true;
    }
};