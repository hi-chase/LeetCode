532. 数组中的 k-diff 数对
给定一个整数数组和一个整数 k，你需要在数组里找到不同的 k-diff 数对，并返回不同的 k-diff 数对 的数目。

这里将 k-diff 数对定义为一个整数对 (nums[i], nums[j])，并满足下述全部条件：

0 <= i, j < nums.length
i != j
|nums[i] - nums[j]| == k
注意，|val| 表示 val 的绝对值。

 

示例 1：

输入：nums = [3, 1, 4, 1, 5], k = 2
输出：2
解释：数组中有两个 2-diff 数对, (1, 3) 和 (3, 5)。
尽管数组中有两个1，但我们只应返回不同的数对的数量。
示例 2：

输入：nums = [1, 2, 3, 4, 5], k = 1
输出：4
解释：数组中有四个 1-diff 数对, (1, 2), (2, 3), (3, 4) 和 (4, 5)。
示例 3：

输入：nums = [1, 3, 1, 5, 4], k = 0
输出：1
解释：数组中只有一个 0-diff 数对，(1, 1)。
示例 4：

输入：nums = [1,2,4,4,3,3,0,9,2,3], k = 3
输出：2
示例 5：

输入：nums = [-1,-2,-3], k = 1
输出：2
 

提示：

1 <= nums.length <= 104
-107 <= nums[i] <= 107
0 <= k <= 107

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        unordered_map<int, int> map;
        int count = 0;

        if(k < 0)//好坑不止有-1 还有-157
            return 0;

        if(k == 0) {
        //当k=0时，其实就是找数组中有没有重复元素 且重复元素个数大于等于2时 我们都视为只有1组K-diff
            for(int i = 0; i < nums.size(); i++) {
            ++map[nums[i]];
            if(map[nums[i]] == 2)
                count++;
            }
            return count;
        }
        //k为其他数字时，先构建hash表，将value初始化为0.
        for(int i = 0; i < nums.size(); i++){
            map[nums[i]] = 0;
        }
        for(int i = 0; i < nums.size(); i++) {
            if(map.find(nums[i] - k) != map.end()) {
            //若nums[i]-k存在于数组中。注：nums[i]-k必然小于nums[i] diff数对为{num[i], nums[i]-k}
                if(map[nums[i]] == 0 ) {//已经存在的diff数对中还没有出现过nums[i]为第一个数
                    count++;//数对数量+1
                    map[nums[i]] = 1;//给nums[i]标记，表示已经有nums[i]开头的数对了，后面不再考虑
                }
            }
        }
        return count;
    }
};