525. 连续数组
给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组（的长度）。

 

示例 1:

输入: [0,1]
输出: 2
说明: [0, 1] 是具有相同数量0和1的最长连续子数组。
示例 2:

输入: [0,1,0]
输出: 2
说明: [0, 1] (或 [1, 0]) 是具有相同数量0和1的最长连续子数组。
 

注意: 给定的二进制数组的长度不会超过50000。

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        unordered_map<int, int> mp;
        int _size = nums.size();
        vector<int> pre(_size + 1, 0);
        int ans = 0;
        mp[0] = 0;
        for(int i = 1; i <= _size; i++)
        {
            pre[i] = pre[i - 1] + (nums[i - 1] == 0 ? -1 : 1);

            if(mp.find(pre[i]) != mp.end())
            {
                ans = std::max(ans, i - mp[pre[i]]);
            }else{
                mp[pre[i]] = i;
            }
        }
        return ans;
    }
};