138. 复制带随机指针的链表
给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。

要求返回这个链表的 深拷贝。 

我们用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：

val：一个表示 Node.val 的整数。
random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。
 

示例 1：



输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == NULL)
        {
            return NULL;
        }
        unordered_map<Node*, Node*> map;
        Node* p = head;
        while(p != NULL)
        {
            Node* newNode = new Node(p->val);
            map[p] = newNode;
            p = p->next;
        }

        p = head;
        while(p != NULL)
        {
            Node* newNode = map[p];
            if(p->next != NULL)
            {
                newNode->next = map[p->next];
            }
            if(p->random != NULL)
            {
                newNode->random = map[p->random];
            }
            p = p->next;
        }
        return map[head];
    }
};